import { validateDiaryContentBody } from "./validate-diary";
import { notesMaxCharacters, notesMinCharacters } from "~data/constants";

// Tests generated by Claude Sonnet 4.5

describe("validateDiaryContentBody", () => {
    describe("when value is empty or whitespace", () => {
        it("returns error when value is null", () => {
            const result = validateDiaryContentBody(null as any);
            expect(result).toBe("Notes field is required.");
        });

        it("returns error when value is undefined", () => {
            const result = validateDiaryContentBody(undefined as any);
            expect(result).toBe("Notes field is required.");
        });

        it("returns error when value is empty string", () => {
            const result = validateDiaryContentBody("");
            expect(result).toBe("Notes field is required.");
        });

        it("returns error when value is only whitespace", () => {
            const result = validateDiaryContentBody("   ");
            expect(result).toBe("Notes field is required.");
        });

        it("returns error when value is tabs and newlines", () => {
            const result = validateDiaryContentBody("\t\n\r");
            expect(result).toBe("Notes field is required.");
        });
    });

    describe("when value is too short", () => {
        it("returns error for single character", () => {
            const result = validateDiaryContentBody("A");
            expect(result).toBe(
                `This field must be at least ${notesMinCharacters} characters`,
            );
        });

        it("returns error for single character with whitespace", () => {
            const result = validateDiaryContentBody("  A  ");
            expect(result).toBe(
                `This field must be at least ${notesMinCharacters} characters`,
            );
        });
    });

    describe("when value is too long", () => {
        it("returns error for exactly max + 1 characters", () => {
            const longString = "A".repeat(notesMaxCharacters + 1);
            const result = validateDiaryContentBody(longString);
            expect(result).toBe(
                `This field must be at most ${notesMaxCharacters} characters`,
            );
        });

        it("returns error for much longer than max", () => {
            const longString = "A".repeat(notesMaxCharacters + 100);
            const result = validateDiaryContentBody(longString);
            expect(result).toBe(
                `This field must be at most ${notesMaxCharacters} characters`,
            );
        });

        it("returns null for exactly max characters", () => {
            const maxString = "A".repeat(notesMaxCharacters);
            const result = validateDiaryContentBody(maxString);
            expect(result).toBeNull();
        });
    });

    describe("when value is valid", () => {
        it("returns null for valid short text", () => {
            const result = validateDiaryContentBody("Valid notes");
            expect(result).toBeNull();
        });

        it("returns null for valid long text", () => {
            const longText = "This is a very long diary entry. ".repeat(20);
            const result = validateDiaryContentBody(longText);
            expect(result).toBeNull();
        });

        it("returns null for text with numbers and symbols", () => {
            const result = validateDiaryContentBody("Dog ate 3 treats at 5pm!");
            expect(result).toBeNull();
        });

        it("returns null for text with special characters", () => {
            const result = validateDiaryContentBody(
                "My pet's behavior @ home is great! :)",
            );
            expect(result).toBeNull();
        });

        it("returns null for multiline text", () => {
            const result = validateDiaryContentBody("Line 1\nLine 2\nLine 3");
            expect(result).toBeNull();
        });

        it("returns null and trims leading/trailing whitespace", () => {
            const result = validateDiaryContentBody("  Valid notes  ");
            expect(result).toBeNull();
        });
    });

    describe("boundary cases", () => {
        it("returns null for exactly max characters with whitespace", () => {
            const maxString = "  " + "A".repeat(notesMaxCharacters) + "  ";
            const result = validateDiaryContentBody(maxString);
            expect(result).toBeNull();
        });

        it("returns null for text at min boundary (2 chars)", () => {
            const result = validateDiaryContentBody("AB");
            expect(result).toBeNull();
        });

        it("returns error for text just below min boundary (1 char)", () => {
            const result = validateDiaryContentBody("A");
            expect(result).toBe(
                `This field must be at least ${notesMinCharacters} characters`,
            );
        });

        it("returns null for text at max boundary (1500 chars)", () => {
            const maxString = "A".repeat(notesMaxCharacters);
            const result = validateDiaryContentBody(maxString);
            expect(result).toBeNull();
        });

        it("returns error for text just above max boundary (1501 chars)", () => {
            const tooLongString = "A".repeat(notesMaxCharacters + 1);
            const result = validateDiaryContentBody(tooLongString);
            expect(result).toBe(
                `This field must be at most ${notesMaxCharacters} characters`,
            );
        });
    });
});
